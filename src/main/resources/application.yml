###########################################################
# EL POOL:
# Imagina un servicio de alquiler de bicicletas:
#
#   Sin pool: Cada usuario compra una bici nueva y la tira después de usarla (caro e ineficiente).
#
#   Con pool: Hay 5 bicis disponibles. Los usuarios las toman prestadas, las usan, y las devuelven para que otros las usen.
###########################################################

spring:
  application:
    name: companies-crud
  profiles:
    default: default
    # el perfil que queremos que escoja del confign server
  config:
    import: "optional:configserver:http://localhost:7777"
    # la config se trae del puerto 7777, es decir el config server


  # ccoge usuario contrasenia y otra informacion dependiendo el perfil donde este
  datasource:
    url: ${db1.url}
    username: ${db1.username}
    password: ${db1.password}
    hikari:
      maximum-pool-size: ${db1.maximum-pool-size}
      connection-timeout: ${db1.connection-timeout}
      # connection-timeout: Tiempo máximo de espera para obtener una conexión (20 segundos).
      # maximum-pool-size: Número máximo de conexiones activas en el pool

server:
  port: 0
  servlet:
    context-path: /companies-crud

logging:
  level:
    org:
      hibernate:
        SQL: DEBUG
        type:
          descriptor:
            sql:
              BasicBinder: TRACE

###########################################################
# Estas líneas ayudan al desarrollador a ver cómo se comporta
# la base de datos durante el desarrollo.
# No las uses en producción.
###########################################################

eureka:
  instance:
    instance-id: "${spring.application.name}:${random.value}"
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
